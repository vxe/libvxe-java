package vxe.be;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Algo {
    public static void Above() {return 0;}
    public static void AddSubarray() {}
    public static void AllocateNode() {}
    public static void AllocateObject() {}
    public static void AnySegmentsIntersect() {}
    public static void ApproxMinWeightVc() {}
    public static void ApproxSubsetSum() {}
    public static void ApproxTspTour() {}
    public static void ApproxVertexCover() {}
    public static void AvlInsert() {}
    public static void BTreeCreate() {}
    public static void BTreeDelete() {}
    public static void BTreeInsert() {}
    public static void BTreeInsertNonfull() {}
    public static void BTreeSearch() {}
    public static void BTreeSplitChild() {}
    public static void BadSetCoverInstance() {}
    public static void Balance() {}
    public static void BellmanFord() {}
    public static void Below() {}
    public static void Bfs() {}
    public static void BiasedRandom() {}
    public static void BinarySearch() {}
    public static void BitReverseCopy() {}
    public static void BitReversedIncrement() {}
    public static void BottomUpCutRod() {}
    public static void Bubblesort() {}
    public static void BucketSort() {}
    public static void BuildMaxHeap() {}
    public static void BuildMaxHeap2() {}
    public static void BuildMinHeap() {}
    public static void CascadingCut() {}
    public static void ChainedHashDelete() {}
    public static void ChainedHashInsert() {}
    public static void ChainedHashSearch() {}
    public static void CircuitSat() {}
    public static void Clique() {}
    public static void CompactListSearch() {}
    public static void CompactListSearch2() {}
    public static void CompactifyList() {}
    public static void CompareExchange() {}
    public static void ComputePrefixFunction() {}
    public static void ComputeTransitionFunction() {}
    public static void ConnectedComponents() {}
    public static void Consolidate() {}
    public static void CountingSort() {}
    public static void CreateNewRsVebTree() {}
    public static void Cut() {}
    public static void CutRod() {}
    public static void DagShortestPaths() {}
    public static void DecreaseKey() {}
    public static void Decrement() {}
    public static void Delete() {}
    public static void DeleteLargeHalf() {}
    public static void Dequeue() {}
    public static void DeterministicSearch() {}
    public static void Dfs() {}
    public static void DfsVisit() {}
    public static void Dft() {}
    public static void Dijkstra() {}
    public static void DirectAddressDelete() {}
    public static void DirectAddressSearch() {}
    public static void Direction() {}
    public static void Discharge() {}
    public static void DiskRead() {}
    public static void DiskWrite() {}
    public static void Enqueue() {}
    public static void Euclid() {}
    public static void ExactSubsetSum() {}
    public static void ExtendShortestPaths() {}
    public static void ExtendedBottomUpCutRod() {}
    public static void ExtendedEuclid() {}
    public static void ExtractMax() {}
    public static void ExtractMin() {}
    public static void FasterAllPairsShortestPaths() {}
    public static void Fib() {}
    public static void FibHeapLink() {}
    public static void FibHeapPrune() {}
    public static void FibHeapUnion() {}
    public static void FindDepth() {}
    public static void FindMaxCrossingSubarray() {}
    public static void FindMaximumSubarray() {}
    public static void FindSet() {}
    public static void FiniteAutomatonMatcher() {}
    public static void FloydWarshall() {}
    public static void FloydWarshall2() {}
    public static void FordFulkerson() {}
    public static void FordFulkersonMethod() {}
    public static void FreeObject() {}
    public static void GenericMst() {}
    public static void GenericPushRelabel() {}
    public static void Graft() {}
    public static void GrahamScan() {}
    public static void GraphIsomorphism() {}
    public static void Greedy() {}
    public static void GreedyActivitySelector() {}
    public static void GreedySetCover() {}
    public static void HamCycle() {}
    public static void HamPath() {}
    public static void HashDelete() {}
    public static void HashInsert() {}
    public static void HashSearch() {}
    public static void HeapDecreaseKey() {}
    public static void HeapDelete() {}
    public static void HeapExtractMax() {}
    public static void HeapExtractMin() {}
    public static void HeapIncreaseKey() {}
    public static void HeapMaximum() {}
    public static void HeapMinimum() {}
    public static void Heapsort() {}
    public static void HireAssistant() {}
    public static void HoarePartition() {}
    public static void HopcroftKarp() {}
    public static void Huffman() {}
    public static void IncreaseKey() {}
    public static void Increment() {}
    public static void InitializePreflow() {}
    public static void InitializeSimplex() {}
    public static void InitializeSingleSource() {}
    public static void InorderTreeWalk() {}
    public static void Insert() {}
    public static void InsertionSort() {}
    public static void IntervalDelete() {}
    public static void IntervalInsert() {}
    public static void IntervalSearch() {}
    public static void IntervalSearchExactly() {}
    public static void IterativeFft() {}
    public static void IterativeTreeSearch() {}
    public static void Johnson() {}
    public static void KmpMatcher() {}
    public static void LcsLength() {}
    public static void Left() {}
    public static void LeftRotate() {}
    public static void Link() {}
    public static void ListDelete() {}
    public static void ListDelete2() {}
    public static void ListInsert() {}
    public static void ListInsert2() {}
    public static void ListSearch() {}
    public static void ListSearch2() {}
    public static void LongestPath() {}
    public static void LongestPathLength() {}
    public static void LookupChain() {}
    public static void LuDecomposition() {}
    public static void LupDecomposition() {}
    public static void LupSolve() {}
    public static void MakeHeap() {}
    public static void MakeSet() {}
    public static void MakeTree() {}
    public static void MatVec() {}
    public static void MatVecMainLoop() {}
    public static void MatrixChainMultiply() {}
    public static void MatrixChainOrder() {}
    public static void MatrixMultiply() {}
    public static void Max3cnf() {}
    public static void MaxCnf() {}
    public static void MaxFlowByScaling() {}
    public static void MaxHeapInsert() {}
    public static void MaxHeapify() {}
    public static void Maximum() {}
    public static void MaybeMstA() {}
    public static void MaybeMstB() {}
    public static void MaybeMstC() {}
    public static void MemoizedCutRod() {}
    public static void MemoizedCutRudAux() {}
    public static void MemoizedMatrixChain() {}
    public static void Merge() {}
    public static void MergeLists() {}
    public static void MergeSort() {}
    public static void MergeSort2() {}
    public static void MillerRabin() {}
    public static void MinGap() {}
    public static void MinHeapInsert() {}
    public static void MinHeapify() {}
    public static void Minimum() {}
    public static void ModularExponentiation() {}
    public static void ModularLinearEquationSolver() {}
    public static void MstKruskal() {}
    public static void MstPrim() {}
    public static void MstReduce() {}
    public static void Multipop() {}
    public static void Multipush() {}
    public static void NaiveStringMatcher() {}
    public static void NextToTop() {}
    public static void OffLineMinimum() {}
    public static void OnLineMaximum() {}
    public static void OnSegment() {}
    public static void OptimalBst() {}
    public static void OsKeyRank() {}
    public static void OsRank() {}
    public static void OsSelect() {}
    public static void PMatrixMultiplyRecursive() {}
    public static void PMerge() {}
    public static void PMergeSort() {}
    public static void PScan1() {}
    public static void PScan2() {}
    public static void PScan3() {}
    public static void PScanDown() {}
    public static void PScanUp() {}
    public static void PSquareMatrixMultiply() {}
    public static void PTranspose() {}
    public static void Parent() {}
    public static void Partition() {}
    public static void Partiton2() {}
    public static void PermuteByCyclic() {}
    public static void PermuteBySorting() {}
    public static void PermuteWithAll() {}
    public static void PermuteWithoutIdentity() {}
    public static void PersistentTreeInsert() {}
    public static void PisanoDelete() {}
    public static void Pivot() {}
    public static void PollardRho() {}
    public static void Pop() {}
    public static void Predecessor() {}
    public static void PrintAllPairsShortestPath() {}
    public static void PrintCutRodSolution() {}
    public static void PrintIntersectingSegments() {}
    public static void PrintLcs() {}
    public static void PrintOptimalParens() {}
    public static void PrintPath() {}
    public static void PrintSet() {}
    public static void ProtoVebInsert() {}
    public static void ProtoVebMember() {}
    public static void ProtoVebMinimum() {}
    public static void ProtoVebSuccessor() {}
    public static void Pseudoprime() {}
    public static void Push() {}
    public static void Quicksort() {}
    public static void Quicksort2() {}
    public static void RabinKarpMatcher() {}
    public static void RaceExample() {}
    public static void RadixSort() {}
    public static void Random() {}
    public static void RandomSample() {}
    public static void RandomSearch() {}
    public static void RandomizeInPlace() {}
    public static void RandomizedHireAssistant() {}
    public static void RandomizedPartition() {}
    public static void RandomizedQuicksort() {}
    public static void RandomizedSelect() {}
    public static void RbDelete() {}
    public static void RbDeleteFixup() {}
    public static void RbEnumerate() {}
    public static void RbInsert() {}
    public static void RbInsertFixup() {}
    public static void RbJoin() {}
    public static void RbTransplant() {}
    public static void RecursiveActivitySelector() {}
    public static void RecursiveFft() {}
    public static void RecursiveMatrixChain() {}
    public static void Reduce() {}
    public static void Relabel() {}
    public static void RelabelToFront() {}
    public static void Relax() {}
    public static void RepetitionMatcher() {}
    public static void Reset() {}
    public static void Right() {}
    public static void RightRotate() {}
    public static void SameComponent() {}
    public static void Scan() {}
    public static void ScrambleSearch() {}
    public static void Search() {}
    public static void SegmentsIntersect() {}
    public static void Select() {}
    public static void Simplex() {}
    public static void SlowAllPairsShortestPaths() {}
    public static void SquareMatrixMultiply() {}
    public static void SquareMatrixMultiplyRecursive() {}
    public static void StackEmpty() {}
    public static void StronglyConnectedComponents() {}
    public static void Successor() {}
    public static void SumArrays() {}
    public static void SumArrays2() {}
    public static void TableDelete() {}
    public static void TableInsert() {}
    public static void TailRecursiveQuicksort() {}
    public static void Top() {}
    public static void TopologicalSort() {}
    public static void TransitiveClosure() {}
    public static void Transplant() {}
    public static void TreapInsert() {}
    public static void TreeDelete() {}
    public static void TreeInsert() {}
    public static void TreeMaximum() {}
    public static void TreeMinimum() {}
    public static void TreePredecessor() {}
    public static void TreeSearch() {}
    public static void TreeSuccessor() {}
    public static void Trim() {}
    public static void Union() {}
    public static void Witness() {}
    public static void VebEmptyTreeInsert() {}
    public static void VebTreeDelete() {}
    public static void VebTreeInsert() {}
    public static void VebTreeMaximum() {}
    public static void VebTreeMember() {}
    public static void VebTreeMinimum() {}
    public static void VebTreePredecessor() {}
    public static void VebTreeSuccessor() {}
}
